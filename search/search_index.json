{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Backend Workshop","text":""},{"location":"#hackduke-2023","title":"HackDuke 2023","text":"<p>Welcome to the backend workshop for HackDuke 2023! We're going to work on an API that allows users to configure weather alerts, and calls the National Weather Service's own API to fetch data.</p> <p>This workshop is structured as two companion documents:</p> <ul> <li>overview slides</li> <li>practical lab</li> </ul> <p>This site is available at: bit.ly/hd23be.</p> <p>The code is available at: github.com/johnjameswhitman/hackduke2023backend.</p>"},{"location":"#project-layout","title":"Project layout","text":"<p>The API for this project is organized as follows:</p> <pre><code>\u251c\u2500\u2500 auth  # app\n\u251c\u2500\u2500 config  # Project setup\n\u2502   \u251c\u2500\u2500 asgi.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 core  # shared functionality\n\u251c\u2500\u2500 docs  # documentation site\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u2514\u2500\u2500 development.txt\n\u2514\u2500\u2500 weather  # app\n    \u251c\u2500\u2500 admin.py\n    \u251c\u2500\u2500 apps.py\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 services.py  # NWS api client\n    \u251c\u2500\u2500 tests\n    \u2514\u2500\u2500 views.py\n</code></pre>"},{"location":"lab/00_prerequisites/","title":"00 Prerequisites","text":"<p>Today we're going to be writing code in Python and versioning it in Git. To get your environment ready let's install some dependencies and check out the lab code. Here's a checklist of what we're going to do:</p> <ul> <li>Install Git</li> <li>Install Docker</li> <li>Set up lab environment</li> </ul> <p>If you get stuck, ask for help!</p>"},{"location":"lab/00_prerequisites/#confirm-git-installation","title":"Confirm Git installation","text":"<p>There's a good chance you already have Git installed. See with:</p> macOS / LinuxWindows <pre><code># In Terminal.app\ngit --version  # macOS may prompt you to install command line developer tools.\n</code></pre> <pre><code># In PowerShell\ngit --version\n</code></pre> <p>If you get something along the lines of command not found, then let's install it:</p> <ul> <li>macOS - If <code>git</code> was missing above, then macOS should have already prompted   you to install command line developer tools.</li> <li>Windows - Install Git from the official   website. Accept the defaults. Re-open powershell after installing.</li> </ul> <p>If you're running Linux, then I assume you know the right package management commands to install Git.</p>"},{"location":"lab/00_prerequisites/#install-docker","title":"Install Docker","text":"<p>If you're not already familiar, Docker is a system that lets you easily  package and deploy applications. Our demo API runs on Docker, and so does a  ton of software on the web. Let's get it installed.</p> <ul> <li>macOS</li> <li>Windows - It    may prompt you to install WSL (Windows Subsystem for Linux), which is fine.    Restart Docker Desktop after installing WSL.</li> </ul>"},{"location":"lab/00_prerequisites/#set-up-lab-environment","title":"Set up lab environment","text":""},{"location":"lab/00_prerequisites/#clone-repo-and-install-dependencies","title":"Clone repo and install dependencies","text":"<p>Tie the above together to get our lab environment ready.</p> <pre><code># clone the repo and enter it\ngit clone https://github.com/johnjameswhitman/hackduke2023backend.git\ncd hackduke2023backend\n\n# start up docker services\n# Windows users may get a prompt asking to allow Docker to accept network \n# connections.\ndocker-compose up -d\n\n# confirm they're up - you should hackduke_django and hackduke_docs\ndocker ps\n\n# run tests\ndocker-compose exec --env DJANGO_SETTINGS_MODULE=config.settings hackduke_django pytest\n</code></pre> <p>At this point tests should all be passing. If you see a warning about The  DEFAULT_FILE_STORAGE setting is deprecated it's ok to ignore.</p>"},{"location":"lab/00_prerequisites/#try-out-api","title":"Try out API","text":"<p>Now that you've gotten all of your dependencies set up, let's actually see  the API in action.</p> <p>You should see all  when you load the API at: http://127.0.0.1:8000/status/.</p> <p></p>"},{"location":"lab/00_prerequisites/#create-local-super-user","title":"Create local super-user","text":"<p>Django comes with user-management and a permissions framework out of the box.  Let's create a local super-user for your API, and make sure we can log into  the admin panel.</p> <pre><code># Create a super-user and set a password.\ndocker-compose exec hackduke_django python manage.py createsuperuser --email admin@example.com --username admin\n</code></pre> <p>Note</p> <p>Since this is your development environment it's ok to use a basic password you won't forget; however, if you do forget it you can reset it with the  command <code>docker-compose exec hackduke_django python manage.py  changepassword admin</code>.</p>"},{"location":"lab/00_prerequisites/#log-into-django-admin","title":"Log into Django admin","text":"<p>Django also comes with an admin panel out of the box. Let's try it out.</p> <p>Open the admin page in your browser: http://127.0.0.1:8000/admin/.</p> <p></p> <p>Enter the credentials for your super-user and log in. You should see the admin home screen with links to Groups and Users, as well as the Weather  alert configs we'll be working with later in the workshop. You can use admin to create new users, manage permissions, and work with models.</p> <p></p>"},{"location":"lab/01_git_basics/","title":"01 Git Basics","text":"<p>Git is a version control system based on a tree of hashed patches called commits. This helps understand the evolution of your code, undo mistakes, and collaborate with others. Let's demo a few of the things you can do with git.</p>"},{"location":"lab/01_git_basics/#work-with-branches","title":"Work with branches","text":"<p>A branch is a named series of commits. You often have one primary branch (e.g. <code>main</code>), with short-lived branches to work on features and functionality. Some projects also use branches as a way to version their releases.</p>"},{"location":"lab/01_git_basics/#check-out-an-existing-branch","title":"Check out an existing branch","text":"<p>Run <code>git branch</code>. It will show all the repo's branches, with an asterisk next to your currently-checked-out branch. Make sure it has an asterisk next to <code>lab/01-git-basics</code>. If not, run the following to check it out:</p> <pre><code>git checkout lab/01-git-basics\n</code></pre>"},{"location":"lab/01_git_basics/#create-a-new-branch","title":"Create a new branch","text":"<p>You can also create a new branch. By default, it will be based on the current  branch (i.e. <code>lab/01-git-basics</code>).</p> <pre><code>git checkout -b lab/01-git-basics-demooo\n</code></pre>"},{"location":"lab/01_git_basics/#rename-a-branch","title":"Rename a branch","text":"<p>Sometimes you need to rename a branch. You can do this with the <code>-m</code> option.</p> <pre><code>git branch -m lab/01-git-basics-demo\n</code></pre>"},{"location":"lab/01_git_basics/#work-with-commits","title":"Work with commits","text":"<p>A commit is an atomic set of patches to your code. Commits tell a story  about how the code evolved. Let's try making some commits.</p>"},{"location":"lab/01_git_basics/#commit-a-modification","title":"Commit a modification","text":"<p>Git is all about tracking modifications to your code. Let's try that out:</p> macOSWindows <pre><code># Make a dummy change to the README\necho \"DukeHacker was here!\" &gt;&gt; README.md\n\n# Commit it\ngit commit -a -m \"Says hi to the README.\"\n</code></pre> <pre><code># Open README.md in your favorite text editor and add \"DukeHacker was here!\" \n# to the end of the file. Save and exit.\n\n# Commit it\ngit commit -a -m \"Says hi to the README.\"\n</code></pre> <p>The <code>-a</code> tells git to include all modifications. The <code>-m</code> tells git you're going to pass a commit-message directly on the command-line. Without <code>-m</code> it will open your shell's default text editor to draft the message instead. Usually this is <code>vim</code> on Unix-based systems.</p> <p>Warning</p> <p>If you end up in <code>vim</code> and are not familiar it, then you can type <code>a</code> to go  into append mode to edit content, followed by <code>ESC</code> to exit append mode, plus <code>:wq</code> followed by <code>ENTER</code> to write your changes and quit editing.</p>"},{"location":"lab/01_git_basics/#commit-a-new-file","title":"Commit a new file","text":"<p>Above we modified an existing file. Git avoids tracking new files unless you explicitly ask it to. So, let's try adding a new file.</p> <pre><code>cp README.md new_file.md\n\n# Observe that git is aware of the untracked file\ngit status\n\n# Add and commit the file\ngit add .  # Adds all new files at or under the current directory (.)\ngit commit -m \"Adds new file.\"\n</code></pre> <p>Note that we omitted <code>-a</code> on the commit because we explicitly added the change on the prior line.</p>"},{"location":"lab/01_git_basics/#revert-some-changes","title":"Revert some changes","text":"<p>Sometimes you realize you made a mistake and want to back it out. Git allows you to do this by reverting commits. This essentially creates a new commit with the opposite changes of the one you would like to back out. There are two ways we can do this.</p> <p>If you want to revert your most recent change(s), you can ask git to roll back relative to the <code>HEAD</code> commit (i.e. your most recent commit). Let's revert the second most-recent commit where we modified the README.</p> <pre><code>git revert --no-edit HEAD~1\n</code></pre> <p>The <code>--no-edit</code> option tells git to use a canned commit-message for the revert commit.</p> <p>You can also revert commits by their exact hash (e.g. if it's older and using offsets is inconvenient).</p> <pre><code>git log  # find the \"Adds new file.\" commit hash\ngit revert --no-edit {hash from above}\n\n# Finally, go back to the main branch\ngit checkout main\n</code></pre>"},{"location":"lab/01_git_basics/#further-reading","title":"Further reading","text":"<p>We scratched the very basics of working with Git. For more comprehensive  tutorials, refer to:</p> <ul> <li>the official tutorial, and</li> <li>the official book,</li> <li>branching strategies (Microsoft)</li> </ul>"},{"location":"lab/02_cors_demo/","title":"02 CORS Demo","text":""},{"location":"lab/02_cors_demo/#intro","title":"Intro","text":"<p>The idea behind CORS is to guard your API against unauthorized requests from  third party sites. For example, imagine you're developing an API for a bank. You would want to prevent an evil website from embedding some javascript on  their site that calls the bank's API using the customer's session credentials  while they're logged into the bank from a different tab.</p> <p>To avoid this situation, all browsers respect a special  <code>access-control-allow-origin</code> header that your API sends back in responses.  This provides a list of origins whose javascript the browser should allow  to make requests to the API. Origins are defined as the combination of  <code>protocol://domain:port</code>.</p> <p></p> <p>The API configures the <code>access-control-allow-origin</code> header within <code>config/settings.py</code> as follows:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n    \"http://127.0.0.1:8001\",  # Docs site\n    \"http://mealpointsapp.localhost:8001\",  # CORS demo site\n]\n</code></pre> <p>So, if you wanted to allow AJAX (i.e. javascript) requests from a React.js  front-end hosted on a different origin than your API, you would need to add  that to your project's settings.</p>"},{"location":"lab/02_cors_demo/#setup","title":"Setup","text":"<p>Let's demo CORS with the local API. It will work if you're viewing this page from a development mkdocs server running from an origin of <code>http://mealpointsapp.localhost:8001</code>...</p> <ul> <li>You're currently viewing this page from the origin: <pre>thinking...</pre></li> <li>Therefore, the API will thinking... your    request.</li> </ul>"},{"location":"lab/02_cors_demo/#demo","title":"Demo","text":"<p>Below is a form that'll transfer some \"meal points\" using a dummy endpoint in  the API. Let's try it from two different origins. Open each of these links in different tabs and then click Transfer below:</p> <ul> <li><code>http://mealpointsapp.localhost:8001/lab/02_cors_demo/</code></li> <li><code>http://badguys.localhost:8001/lab/02_cors_demo/</code></li> </ul> <p>Note</p> <p><code>mealpointsapp.localhost</code> and <code>badguys.localhost</code> are both addresses that point back to your local machine; however, because they're different  domains each address represents a different origin.</p>"},{"location":"lab/02_cors_demo/#transfer-meal-points","title":"Transfer \"meal points\"","text":"Transfer <p>If you submit the above for from an allowed origin, then you should get an  alert:</p> <p></p> <p>But, if you submit it from a disallowed origin, then you'll get an error and  should see something like below in your browser console:</p> <p></p>"},{"location":"lab/03_data_modeling/","title":"03 Data Modeling","text":""},{"location":"lab/03_data_modeling/#goals","title":"Goals","text":"<p>In this lab we are going to:</p> <ul> <li>Gain an understanding of how Django's Object Relational Mapper works</li> <li>Modify the data model</li> <li>Create some data with Django Admin</li> </ul>"},{"location":"lab/03_data_modeling/#entity-relationships","title":"Entity relationships","text":"<p>When building an API it's important to get your data model right early on.  Unwinding mistakes down the road is difficult. Because it's hard to theorize  an entire problem space, start small and iterate as you learn more.</p> <p>Entity is a fancy synonym for noun or object. We use them to model the  relationships between things. For our API we have a simple data model that  lets users configure weather alerts.</p> <pre><code>erDiagram\n  User {\n    int id PK\n    string username\n  }\n  WeatherAlertConfig {\n    int id PK\n    int user_id FK\n    string state_abbreviation \"The state where we want to see alerts\"\n    enum severity \"NEW! You're going to add me\"\n  }\n  User ||--o{ WeatherAlertConfig : \"has many\"</code></pre> <p>A couple of notes on the diagram:</p> <ul> <li>Each entity has an <code>id</code> field that represents its primary key. Django will    automatically assign this to every model you create.</li> <li><code>WeatherAlertConfig</code> has a <code>user_id</code> foreign key that points back to the    owning <code>User</code>. This forms a many-to-one relationship.</li> </ul> <p>Our job today will be to add the new <code>severity</code> field to the <code>WeatherAlertConfig</code>.</p>"},{"location":"lab/03_data_modeling/#mapping-database-records-to-python-objects","title":"Mapping database records to Python objects","text":"<p>Django comes with an Object Relational Mapper (docs). It allows  us to model database tables as Python objects, and then automatically generate the necessary changes in the database to store data.</p> <p>Aside</p> <p>It's hard to talk about data modeling without talking about SQL. Knowing SQL will make you a better backend developer. Unfortunately we don't have time to cover it today. In your free time check out a tutorial like  sqltutorial.org.</p> <p>Let's look at the model for our <code>WeatherAlertConfig</code> entity, which lives in  <code>weather/models.py</code>.</p> <pre><code>class WeatherAlertConfig(models.Model):\n\"\"\"Configuration for an alert that a user is interested in.\"\"\"\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    state_abbreviation = models.CharField(max_length=2)\n    # TODO: below we'll add severity!\n</code></pre> <p>This model maps onto the entity diagram above. A couple of things to note:</p> <ul> <li><code>user</code> is a <code>ForeignKey</code> onto the <code>User</code> model. Django will automatically    create the underlying <code>user_id</code> foreign key in the table, and will make the    related <code>User</code> object available at this property on instances of the model.</li> <li>We don't need to specify an <code>id</code> primary key, because the underlying    <code>models.Model</code> base-class adds it for us.</li> <li>Use descriptive names for your fields. For example, <code>state</code> may be    confusing because it's not clear whether it's the full-state, or just the    two-letter <code>state_abbreviation</code> like we've indicated.</li> </ul>"},{"location":"lab/03_data_modeling/#tweak-the-model-and-migrate","title":"Tweak the model and migrate","text":"<p>Right now, our users can tell the API which states they're interested in getting weather alerts for, but the National Weather Service API that we rely  upon offers a few more things we can use to filter alerts. To see what's  available go to the National Weather Service API docs &gt; Specification &gt;  expand <code>GET /alerts</code>.</p> <p>After consulting with users, we've found out they would also like to include  the <code>severity</code> field to avoid being inundated with low risk alerts. This is  an <code>enum</code> field, which means it can hold one of a set number of values:</p> <ul> <li><code>Extreme</code></li> <li><code>Severe</code></li> <li><code>Moderate</code></li> <li><code>Minor</code></li> <li><code>Unknown</code></li> </ul>"},{"location":"lab/03_data_modeling/#add-severity-field","title":"Add <code>severity</code> field","text":"<p>Let's wire this new <code>severity</code> field into the model.</p> <ol> <li>Open <code>weather/models.py</code>.</li> <li>Add a new class above <code>WeatherAlertConfig</code> with the following:     <pre><code>class Severity(models.TextChoices):\n    EXTREME = \"Extreme\"\n    SEVERE = \"Severe\"\n    MODERATE = \"Moderate\"\n    MINOR = \"Minor\"\n    UNKNOWN = \"Unknown\"\n</code></pre></li> <li>Now, add a new field to the <code>WeatherAlertConfig</code> model that maps the text     choices to a column in the database:     <pre><code>severity = models.CharField(\n    max_lenth=10,\n    choices=Severity.choices,\n    # Below options allow users to omit a severity if they want everything.\n    blank=True,\n    null=True,\n)\n</code></pre></li> </ol> <p>Afterward, <code>weather/models.py</code> should look similar to below:</p> <pre><code>from django.contrib.auth.models import User\nfrom django.db import models\n\n\nclass Severity(models.TextChoices):\n    EXTREME = \"Extreme\"\n    SEVERE = \"Severe\"\n    MODERATE = \"Moderate\"\n    MINOR = \"Minor\"\n    UNKNOWN = \"Unknown\"\n\n\nclass WeatherAlertConfig(models.Model):\n\"\"\"Configuration for an alert that a user is interested in.\"\"\"\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    state_abbreviation = models.CharField(max_length=2)\n    severity = models.CharField(\n        max_length=10,\n        choices=Severity.choices,\n        # Below options allow users to omit a severity if they want everything.\n        blank=True,\n        null=True,\n    )\n</code></pre>"},{"location":"lab/03_data_modeling/#migrate-changes","title":"Migrate changes","text":"<p>At this point we've made changes to our data model, but need to reflect those  changes into the database. This is where migrations come into play. Django  will inspect your models and the set of migrations, and then generate a new  migration that closes any gaps between the two. To do this we'll use management commands with Django.</p> <pre><code># diff weather/models.py and tables\ndocker-compose exec hackduke_django python manage.py makemigrations\n\n# apply changes\ndocker-compose exec hackduke_django python manage.py migrate\n</code></pre>"},{"location":"lab/03_data_modeling/#django-admin","title":"Django Admin","text":"<p>Now that we've modeled our changes and applied them to the database, let's  see what it looks like:</p> <ol> <li> <p>Navigate to Django Admin and log in with your superuser (admin) if necessary:    http://127.0.0.1:8000/admin</p> <p></p> </li> <li> <p>Click on Weather alert configs    and then ADD WEATHER ALERT CONFIG (top right)</p> <p></p> </li> <li> <p>Populate and save the alert (note that it automagically includes a dropdown     for <code>severity</code>)</p> <p></p> </li> <li> <p>The new alert appears in the list</p> <p></p> </li> </ol>"},{"location":"lab/03_data_modeling/#querysets","title":"Querysets","text":"<p>In Django, <code>querysets</code> are objects that build up a query to the database.  This lets you do things like construct a set of filters using inputs from  different places.</p> <p>To see them in action, check out weather-alerts list endpoint in <code>weather/views.py</code>, specifically the last line of this function:</p> <pre><code>@router.get(\"/alerts\", response=list[WeatherAlertResponse])\ndef list_weather_alerts(request) -&gt; list[WeatherAlertConfig]:\n    return WeatherAlertConfig.objects.filter(user=request.auth)\n</code></pre> <p><code>WeatherAlertConfig.objects</code> returns a <code>queryset</code>. That itself has a <code>.filter()</code> method we use to restrict the list of alerts to the current user. You can  chain these together and pass them around. This is simple example; see the  official Django querying docs for more complex ones.</p>"},{"location":"lab/04_api_endpoints/","title":"04 API Endpoints","text":""},{"location":"lab/04_api_endpoints/#goals","title":"Goals","text":"<p>Today we're going to learn how to:</p> <ul> <li>Interact with our API</li> <li>Authenticate requests</li> <li>Modify endpoints</li> </ul> <p>This lab will also give you a quick overview of the Django Ninja plugin  that we're using for the API. It provides simple request deserialization  and response serialization using Python type annotations. For in depth info,  consult the Django Ninja docs.</p>"},{"location":"lab/04_api_endpoints/#api-docs-viewer","title":"API docs viewer","text":"<p>Django Ninja provides a documentation viewer out of the box that we can use  to see the shapes of API requests and responses, and interact with  endpoints. Make sure you're running the API (<code>docker-compose up -d</code>), and  then navigate to the following URL to view the docs: http://127.0.0.1:8000/api/docs.</p> <p></p>"},{"location":"lab/04_api_endpoints/#jwt-authentication","title":"JWT authentication","text":"<p>Without going into too much detail, the API uses JSON Web Tokens to  authenticate requests.</p> <p>Note</p> <p>If you're curious how the API enforces JWT authentication, check out  <code>auth/backends.py</code>, <code>config/urls.py</code> and the  Django Ninja Auth docs.</p> <p>In order to call endpoints you'll need to generate one using your superuser  (admin) credentials you previously set up, and tell the docs site to use it.</p> <ol> <li> <p>Click into the <code>POST /api/auth/login</code> endpoint in the docs, press Try     it out:</p> <p></p> </li> <li> <p>Populate your superuser username (admin) and password in the Request     body, then press Execute</p> <p></p> </li> <li> <p>Copy the JWT out of the Response body &gt; <code>access_token</code> field</p> <p></p> </li> <li> <p>Scroll back to the top of the page, click Authorize, and paste the     JWT into the text box that appears</p> <p></p> </li> <li> <p>Now you're ready to call the other endpoints. Scroll down and execute the     <code>GET /api/weather/alerts</code> endpoint. You should see the one you created in     Django Admin earlier</p> <p></p> </li> </ol> <p>Warning</p> <p>The docs site doesn't save your login info when you reload it. So, to save  some time it's a good idea paste your JWT into your notes for quick  reference. It will be good for 24 hours from the time you generate it.</p>"},{"location":"lab/04_api_endpoints/#working-with-endpoints","title":"Working with endpoints","text":"<p>Now that we're set up to make calls to the API, let's learn some more about  how to expose endpoints with Django Ninja.</p>"},{"location":"lab/04_api_endpoints/#routers-and-urls","title":"Routers and URLs","text":"<p>Two files you'll see in every Django project are <code>urls.py</code> and <code>views.py</code>.  Django uses URLs to map URL paths to views that you've defined. Django Ninja takes this a step further, and introduces the concept of a <code>Router</code> that handles sub-paths for a corner of your API.</p> <p>Consider this example from <code>config/urls.py</code>.</p> <pre><code>from auth.views import router as auth_router\nfrom weather.views import router as weather_router\n\napi = NinjaAPI(auth=JWTAuthRequired())\napi.add_router(\"/auth/\", auth_router)\napi.add_router(\"/weather/\", weather_router)\n\nurlpatterns = [\n    path(\"status/\", include(\"health_check.urls\")),\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]\n</code></pre> <p>It exposes our status page, admin page, and the API. But, it leaves routing  anything under <code>api/</code> to Django Ninja. We've included two routers under the  Ninja API that will handle requests to <code>/api/auth/</code> and <code>/api/weather/</code>.</p>"},{"location":"lab/04_api_endpoints/#views-and-deserialization","title":"Views and (de)serialization","text":"<p>Now that we have an idea of how Django configures <code>GET /api/weather/alerts</code>,  how do we actually write the code that handles requests to that path? To see,  checkout <code>weather/views.py</code>.</p> <pre><code>router = Router()\n\n@router.get(\"/alerts\", response=list[WeatherAlertResponse])\ndef list_weather_alerts(request) -&gt; list[WeatherAlertConfig]:\n    return WeatherAlertConfig.objects.all()\n</code></pre> <p>Here we've created the <code>router</code> that we wired into Django Ninja above, and  tell it that <code>GET</code> requests to <code>/alerts</code> (under <code>/api/weather</code>) should be  handled by the <code>list_weather_alerts</code> function.</p> <p>But, what does the function actually do? It loads all <code>WeatherAlertConfig</code>  records from the database and returns them to the user. This is the same  model that we modified in the prior lab.</p> <p>Ok so, how does Django Ninja actually convert the model instances into JSON  that the browser understands? This is part of the magic of Django Ninja. In  the call to the <code>@router.get</code> decorator, we say the response will be a list  of <code>WeatherAlertResponses</code>:</p> <pre><code>class WeatherAlertResponse(ModelSchema):\n    class Config:\n        model = WeatherAlertConfig\n        model_fields = \"__all__\"\n</code></pre> <p>Django Ninja provides a special <code>ModelSchema</code> class that we can inherit to  define the shape our requests and responses. In some cases you manually set  the fields, but here we simply tell it to mirror the shape of our model.  Django Ninja handles the rest.</p>"},{"location":"lab/04_api_endpoints/#update-the-api","title":"Update the API","text":"<p>Now it's your turn to update the API. Let's handle the new <code>severity</code> field  we added to <code>WeatherAlertConfig</code> in the last lab.</p>"},{"location":"lab/04_api_endpoints/#wire-severity-into-endpoints","title":"Wire <code>severity</code> into endpoints","text":"<p>Within <code>weather/views.py</code>, notice that we have CRUD endpoints that line up  with their corresponding HTTP methods. We'll need to make sure we handle the  new <code>severity</code> field in these. </p> <p>The <code>WeatherAlertRequest</code> schema defines the shape of requests that modify  a weather alert config. Add <code>severity</code> here so the API includes it when  creating and updating alerts:</p> <pre><code>from .models import Severity\n\nclass WeatherAlertRequest(Schema):\n    state_abbreviation: str\n    severity: Severity\n</code></pre> <p>Endpoints that rely on this schema will automatically have access to the new  severity field when working with requests.</p>"},{"location":"lab/04_api_endpoints/#update-service-call","title":"Update <code>service</code> call","text":"<p><code>services</code> are not a Django concept, but are a good place to drop complex  business logic and interactions with third parties. For example, the API has a  <code>NationalWeatherService</code> class in <code>weather/services.py</code>  that handles interactions with the National Weather Service API. Let's get that working with the  new <code>severity</code> field.</p> <ol> <li> <p>First, update <code>_get_alerts</code> to include the severity:</p> <pre><code>def _get_alerts(self, area: str, severity: str, limit: int) -&gt; dict:\n\"\"\"Fetches alerts from the National Weather Service API.\"\"\"\n    res = requests.get(\n        self.ALERTS_URL,\n        params={\"area\": area, \"severity\": severity, \"limit\": limit},\n    )\n    res.raise_for_status()  # Raises error if API returned HTTP 4XX or 5XX status.\n    return res.json()\n</code></pre> </li> <li> <p>Next, update the cache key we use to ensure the    API caches repeated calls to the National Weather Service API:</p> <pre><code>ALERTS_CACHE_KEY_TEMPLATE: str = f\"{__name__}.alerts.{{area}}.{{severity}}.{{limit}}\"\n</code></pre> </li> <li> <p>Finally, update the call to fetch and cache the National Weather Service     data:</p> <pre><code>alerts = cache.get_or_set(\n    self.ALERTS_CACHE_KEY_TEMPLATE.format(\n        area=config.state_abbreviation,\n        severity=config.severity,  # Update here\n        limit=limit,\n    ),\n    default=partial(\n        self._get_alerts,\n        area=config.state_abbreviation,\n        severity=config.severity,  # And here\n        limit=limit,\n    ),\n)\n</code></pre> </li> </ol>"},{"location":"lab/04_api_endpoints/#solution","title":"Solution","text":"<p>Once you're done with the edits, <code>weather/services.py</code> should look something like this:</p> <pre><code>import logging\nfrom enum import Enum\nfrom functools import partial\nfrom typing import Optional\n\nimport requests\nfrom django.core.cache import cache\nfrom ninja.schema import Schema\n\nfrom .models import WeatherAlertConfig\n\nlogger = logging.getLogger(__name__)\n\n\nclass WeatherAlertStatus(str, Enum):\n  ACTUAL = \"Actual\"\n  EXERCISE = \"Exercise\"\n  SYSTEM = \"System\"\n  TEST = \"Test\"\n  DRAFT = \"Draft\"\n\n\nclass WeatherAlertSeverity(str, Enum):\n  EXTREME = \"Extreme\"\n  SEVERE = \"Severe\"\n  MODERATE = \"Moderate\"\n  MINOR = \"Minor\"\n  UNKNOWN = \"Unknown\"\n\n\nclass WeatherAlert(Schema):\n\"\"\"Lightweight entity based on Alert from Weather API.\n\n  For docs see Schemas &gt; Alert: https://www.weather.gov/documentation/services-web-api\n  \"\"\"\n\n  id: str\n  status: WeatherAlertStatus\n  severity: WeatherAlertSeverity\n  headline: str\n  description: str\n  instruction: Optional[str]\n\n\nclass NationalWeatherService:\n\"\"\"Utilities to retrieve data from the National Weather Service API.\n\n  For docs see: https://www.weather.gov/documentation/services-web-api\n  \"\"\"\n\n  ALERTS_URL: str = \"https://api.weather.gov/alerts\"\n  ALERTS_CACHE_KEY_TEMPLATE: str = f\"{__name__}.alerts.{{area}}.{{severity}}.{{limit}}\"\n\n  def _get_alerts(self, area: str, severity: str, limit: int) -&gt; dict:\n\"\"\"Fetches alerts from the National Weather Service API.\"\"\"\n      res = requests.get(\n          self.ALERTS_URL,\n          params={\"area\": area, \"severity\": severity, \"limit\": limit},\n      )\n      res.raise_for_status()  # Raises error if API returned HTTP 4XX or 5XX status.\n      return res.json()\n\n  def get_alerts(\n      self, config: WeatherAlertConfig, limit: int = 10\n  ) -&gt; list[WeatherAlert]:\n\"\"\"Fetches alerts for a given WeatherAlertConfig.\"\"\"\n      alerts = cache.get_or_set(\n          self.ALERTS_CACHE_KEY_TEMPLATE.format(\n              area=config.state_abbreviation,\n              severity=config.severity,  # Update here\n              limit=limit,\n          ),\n          # default can be a value or a zero-argument callable. \"partial\" takes a callable\n          # (self._get_alerts) and its arguments (anything, but \"area\" and \"limit\" in this case),\n          # and returns a new callable. This defers execution of self._get_alerts with the\n          # given arguments until partial's return-value itself is called.\n          default=partial(\n              self._get_alerts,\n              area=config.state_abbreviation,\n              severity=config.severity,  # And here\n              limit=limit,\n          ),\n      )\n\n      weather_alerts = []\n      for alert_data in alerts.get(\"features\", []):\n          properties = alert_data[\"properties\"]\n          weather_alerts.append(\n              WeatherAlert(\n                  id=properties[\"id\"],\n                  status=WeatherAlertStatus(properties[\"status\"]),\n                  severity=WeatherAlertSeverity(properties[\"severity\"]),\n                  headline=properties[\"headline\"],\n                  description=properties[\"description\"],\n                  instruction=properties[\"instruction\"],\n              )\n          )\n\n      if weather_alerts:\n          logger.debug(\"Found alerts.\", extra={\"count\": len(weather_alerts)})\n      else:\n          logger.warning(\"Got no weather alerts!\", extra={\"area\": config.state_abbreviation})\n\n      return weather_alerts\n</code></pre>"},{"location":"lab/04_api_endpoints/#call-alerts-endpoint","title":"Call alerts endpoint","text":"<p>Let's confirm that our update worked. Go back to the API docs ( http://127.0.0.1:8000/api/docs). You may  need to Authorize again if you've reloaded the page.</p> <ol> <li>Scroll down to <code>GET /api/weather/alerts/{weather_alert_config_id}</code>.</li> <li>Click Try it out, and provide a <code>weather_alert_config_id</code> of 1.</li> <li> <p>Observe that you get weather alerts for the severity you configured in     your model (e.g. Extreme).</p> <p></p> </li> </ol>"}]}