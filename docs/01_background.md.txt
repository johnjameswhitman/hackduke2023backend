## Background on APIs

- What is an API?
- What is HTTP?
- How do you secure an API?

---

### What is an API?

- Machine-to-machine interaction
- Structured requests and responses
- Oversimplification:
  - noun-oriented ([CRUD][crud] and [REST][rest]), or
  - verb-oriented ([RPC][rpc])
- REST is also about discoverability (see [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS))


[crud]: https://en.wikipedia.org/wiki/Create,_read,_update_and_delete
[rest]: https://en.wikipedia.org/wiki/Representational_state_transfer
[rpc]: https://en.wikipedia.org/wiki/Remote_procedure_call

----

### Noun-oriented API

Update status of a _todo_.

```
PUT api/todos/{todo_id}
{
  "status": "complete"
}
```

Note:

- Technically you're supposed to use `PATCH` here instead of `PUT`, but it's 
  rare in the real world.

----

### Verb-oriented API

Tell the system to _complete_ a _todo_.

```
POST api/todos/{todo}/complete
```

---

### What is HTTP?

- Application protocol for loading documents over a network connection
- Request &rarr; Response
- Stateless

Note:

- We're going to come back to URLs when we discuss security

---

### HTTP Request

- URL
- Method
- Headers
- Cookies
- Body

----

### HTTP Request

URL <span style="opacity:0.1;">: Method : Headers : Cookies : Body</span>

_Uniform Resource Locators_ point to documents

![structure of a URL](01_background/mdn_url_all.png "Structure of a URL")

Credit: [MDN](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL)

----

### HTTP Request

<span style="opacity:0.1;">URL :</span> Method <span style="opacity:0.1;">: Headers : Cookies : Body</span>

![HTTP request methods](01_background/wikipedia_http_methods.png "HTTP request 
methods")

Credit: [Wikipedia](https://en.wikipedia.org/wiki/HTTP#Request_methods)

----

### HTTP Request

<span style="opacity:0.1;">URL : Method :</span> Headers <span style="opacity:0.1;">: Cookies : Body</span>

TODO: screenshot of headers

Note:

- Headers are key-value pairs
- Important ones are `Content-Type` and `Accept`
- Demo google.com in Chrome dev tools

----

### HTTP Request

<span style="opacity:0.1;">URL : Method : Headers :</span> Cookies <span style="opacity:0.1;">: Body</span>

TODO: screenshot of cookies

Note:

- Cookies are also key-value pairs!
- Cookies are actually sent in the headers
- Demo google.com in Chrome dev tools

----

### HTTP Request

<span style="opacity:0.1;">URL : Method : Headers : Cookies :</span> Body

JSON body

TODO: Screenshot of JSON body

----

### HTTP Request

<span style="opacity:0.1;">URL : Method : Headers : Cookies :</span> Body

Form body

TODO: Screenshot of form body

Note:

- Form body lets you pass files (which you cannot do with JSON body)
- You cannot nest forms, so one trick is to pass JSON in a form-field


---

### HTTP Response

- Status Codes
- Headers
- Body

----

### HTTP Response

Status Codes <span style="opacity:0.1;">: Headers : Body</span>

TODO: screenshot

----

### HTTP Response

<span style="opacity:0.1;">Status Codes :</span> Headers <span style="opacity:0.1;">: Body</span>

TODO: screenshot

----

### HTTP Response

<span style="opacity:0.1;">Status Codes : Headers :</span> Body

TODO: screenshot

---

## Security

- HTTPS and TLS
- Cross-origin security
- AutheNtication and AuthoriZation

Note:

- AuthN establishes _who_ you are
- AuthZ establishes _what_ you can do

----

### [TLS][tls] enables [HTTPS][https]

- Encrypts HTTP request and response 
- Handshake: asymmetric encryption (public certificate, private key, RSA)
- Content exchange: Symmetric encryption (shared key, AES)

Note:

- With asymmetric encryption server advertises a public certificate that enables
  clients to encrypt a message that _only_ its private key can decrypt.
- With HTTPS, browser fetches a domain's public certificate, and negotiates a
  shared _symmetric key_ that can both encrypt and decrypt messages (symmetric
  keys are more efficient than asymmetric).
- Once a connection is established the browser will send the encrypted request
  path, query, fragment, headers and body, and the server will encrypt the 
  response data.

[https]: https://en.wikipedia.org/wiki/HTTPS
[tls]: https://en.wikipedia.org/wiki/Transport_Layer_Security

----

### Cross-Origin Security

- Why? Prevent badguys.com from moving money at yourbank.com
- How? Configure [cross-origin resource sharing][cors]
- [Origin][rfc6454_origin]: `scheme://domain:port`

[cors]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing
[rfc6454_origin]: https://datatracker.ietf.org/doc/html/rfc6454#section-3.2

Note:

- [Julia Evans comic](https://drawings.jvns.ca/cors/)
